Программа, генерирующая owl-файл (онтологию) на основе csv-файла, содержащего пары терминов (имен классов) с указанием типа связи для каждой пары.
(синтаксис по https://www.w3.org/TR/2004/REC-owl-guide-20040210/)
Помимо owl-файла может вернуть отдельный текстовый файл со списком всех уникальных терминов в таблице (т.е. список всех классов)

==Ожидаемый формат csv-таблицы:
столбцы MainTerm, SubRole, SubTerm
MainTerm - главный класс в паре классов в отношении (например "дерево")
SubTerm - подчиненный класс ("ветка")
SubRole - роль подчиненного класса по отношению к главному ("часть")
(SubRole = половина названия отношения для отношений типа род-ВИД, ЧАСТЬ-целое, причина-СЛЕДСТВИЕ и т.п.)

Во всех именах, состоящих из двух и более слов, пробелы заменяются на нижние подчеркивания.

==Принцип работы:

Для каждого основного типа отношения (по SubRole), помимо род-вид, в онтологию включается соответствующий тип свойства (ObjectProperty).
Имена отношений автоматически генерируются по единому образцу "имеет"+SubRole

Для каждого найденного в таблице термина в онтологию включается:
1) класс с соответствующим именем
И при наличии:
2) указание того, прямым подклассом каких классов данный класс является (SubclassOf)
3) два варианта:

	3.1) ontologyfromcsvgen_specrel.py
	Для каждой пары классов в отношении помимо род-вид в онтологию добавляется новое ObjectProperty - подвид соответствующего основного типа отношения, с уточнением domain(главный класс) и range(подчиненный класс).
	В этом варианте отношения в Protege список полученных конкретных отношений, сгруппированных в поддеревья по главным "чистым" отношеням, виден во вкладке Properties, кроме род-вид, заключенного в основной иерархии классов в OWLclasses). Также такие дополнительные отношения отображаются в других средствах визуализации онтологий.

	3.2) ontologyfromcsvgen.py
	Для каждой пары классов в отношении помимо род-вид в онтологию для основного класса в паре добавляется соответствующее свойство с значением - вспомогательным классом.
	!!!Такие свойства не отображаются Protege или другими средствами визуализации онтологий как owlgred


==Запуск: (python или python3)
1) (подходящая для визуализации) Версия с включением отношений между классами в виде новых ObjectProperty, уточненных по domain и range

python ontologyfromcsvgen_specrel.py <имя файла-таблицы>.csv <имя выходного файла-онтологии>.owl [ <имя выходного файла-списка терминов>.txt ]

Используя входные и выходные файлы-примеры:
python ontologyfromcsvgen_specrel.py termrel_3table.csv termrel_sr.owl termrel.txt
python ontologyfromcsvgen_specrel.py termrel_3table.csv termrel_sr.owl

2) Версия с включением прочих отношений в виде свойств класса, без создания уточненных типов свойств

python ontologyfromcsvgen.py <имя файла-таблицы>.csv <имя выходного файла-онтологии>.owl [ <имя выходного файла-списка терминов>.txt ]

Используя входные и выходные файлы-примеры:
python ontologyfromcsvgen.py termrel_3table.csv termrel.owl termrel.txt
python ontologyfromcsvgen.py termrel_3table.csv termrel.owl


==Файлы:
termrel_3table.csv - пример исходной таблицы

ontologyfromcsvgen_specrel.py - программа (версия 1)
termrel_sr.owl - выходной файл-онтология (версия 1)

ontologyfromcsvgen.py - программа (версия 2) 
termrel.owl - выходной файл-онтология (версия 2)

termrel.txt - выходной файл со списком терминов по таблице-примеру
